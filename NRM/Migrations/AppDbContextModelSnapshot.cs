// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NRM;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NRM.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NRM.Models.AbstractModels.AbstractLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("AbstractLog");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbstractLog");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("NRM.Models.AbstractModels.AbstractParcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("DepartureTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("TrackNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("AbstractParcel");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbstractParcel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogType");
                });

            modelBuilder.Entity("NRM.Models.DataModels.ParcelStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ParcelStatus");
                });

            modelBuilder.Entity("NRM.Models.DataModels.ParcelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ParcelType");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Полный администратор"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Администратор пользователей"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Администратор посылок"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Пользователь"
                        });
                });

            modelBuilder.Entity("NRM.Models.DataModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ia-matvey@mail.ru",
                            FirstName = "Матвей",
                            IsDeleted = false,
                            LastName = "Чиков",
                            Login = "Admin",
                            PasswordHash = "$2a$11$5sMN/8tgOvEHpRIFglQL8ux3xuTjyFuw/r2OcIw4AxMD7AC54bDwy",
                            Patronymic = "Федорович",
                            PhoneNumber = "89147291215",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogGroupParcel", b =>
                {
                    b.HasBaseType("NRM.Models.AbstractModels.AbstractLog");

                    b.Property<int>("GroupParcelId")
                        .HasColumnType("integer");

                    b.HasIndex("GroupParcelId");

                    b.HasDiscriminator().HasValue("LogGroupParcel");
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogParcel", b =>
                {
                    b.HasBaseType("NRM.Models.AbstractModels.AbstractLog");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.HasIndex("ParcelId");

                    b.HasDiscriminator().HasValue("LogParcel");
                });

            modelBuilder.Entity("NRM.Models.DataModels.GroupParcel", b =>
                {
                    b.HasBaseType("NRM.Models.AbstractModels.AbstractParcel");

                    b.Property<int>("PlaceOfDeliveryId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaceOfDepartureId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasIndex("PlaceOfDeliveryId");

                    b.HasIndex("PlaceOfDepartureId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("GroupParcel");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Parcel", b =>
                {
                    b.HasBaseType("NRM.Models.AbstractModels.AbstractParcel");

                    b.Property<int?>("GroupParcelId")
                        .HasColumnType("integer");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasIndex("GroupParcelId");

                    b.HasIndex("TypeId");

                    b.HasDiscriminator().HasValue("Parcel");
                });

            modelBuilder.Entity("NRM.Models.AbstractModels.AbstractLog", b =>
                {
                    b.HasOne("NRM.Models.DataModels.LogType", "Type")
                        .WithMany("Logs")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NRM.Models.DataModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NRM.Models.AbstractModels.AbstractParcel", b =>
                {
                    b.HasOne("NRM.Models.DataModels.ParcelStatus", "Status")
                        .WithMany("Parcels")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("NRM.Models.DataModels.User", b =>
                {
                    b.HasOne("NRM.Models.DataModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogGroupParcel", b =>
                {
                    b.HasOne("NRM.Models.DataModels.GroupParcel", "GroupParcel")
                        .WithMany("LogGroupParcels")
                        .HasForeignKey("GroupParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupParcel");
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogParcel", b =>
                {
                    b.HasOne("NRM.Models.DataModels.Parcel", "Parcel")
                        .WithMany("LogParcels")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("NRM.Models.DataModels.GroupParcel", b =>
                {
                    b.HasOne("NRM.Models.DataModels.Place", "PlaceOfDelivery")
                        .WithMany()
                        .HasForeignKey("PlaceOfDeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NRM.Models.DataModels.Place", "PlaceOfDeparture")
                        .WithMany()
                        .HasForeignKey("PlaceOfDepartureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NRM.Models.DataModels.User", "User")
                        .WithMany("GroupParcels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceOfDelivery");

                    b.Navigation("PlaceOfDeparture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Parcel", b =>
                {
                    b.HasOne("NRM.Models.DataModels.GroupParcel", "GroupParcel")
                        .WithMany("Parcels")
                        .HasForeignKey("GroupParcelId");

                    b.HasOne("NRM.Models.DataModels.ParcelType", "Type")
                        .WithMany("Parcels")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupParcel");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogType", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("NRM.Models.DataModels.ParcelStatus", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("NRM.Models.DataModels.ParcelType", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NRM.Models.DataModels.User", b =>
                {
                    b.Navigation("GroupParcels");
                });

            modelBuilder.Entity("NRM.Models.DataModels.GroupParcel", b =>
                {
                    b.Navigation("LogGroupParcels");

                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Parcel", b =>
                {
                    b.Navigation("LogParcels");
                });
#pragma warning restore 612, 618
        }
    }
}
