// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NRM;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NRM.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230708055144_InitialCreate2")]
    partial class InitialCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NRM.Models.AbstractModels.AbstractLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("AbstractLog");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbstractLog");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("NRM.Models.AbstractModels.AbstractParsel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("DepartureTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("TrackNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("AbstractParsel");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbstractParsel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogType");
                });

            modelBuilder.Entity("NRM.Models.DataModels.ParselSatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ParselSatus");
                });

            modelBuilder.Entity("NRM.Models.DataModels.ParselType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ParselType");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NRM.Models.DataModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogGroupParsel", b =>
                {
                    b.HasBaseType("NRM.Models.AbstractModels.AbstractLog");

                    b.Property<int>("GroupParselId")
                        .HasColumnType("integer");

                    b.HasIndex("GroupParselId");

                    b.HasDiscriminator().HasValue("LogGroupParsel");
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogParsel", b =>
                {
                    b.HasBaseType("NRM.Models.AbstractModels.AbstractLog");

                    b.Property<int>("ParselId")
                        .HasColumnType("integer");

                    b.HasIndex("ParselId");

                    b.HasDiscriminator().HasValue("LogParsel");
                });

            modelBuilder.Entity("NRM.Models.DataModels.GroupParsel", b =>
                {
                    b.HasBaseType("NRM.Models.AbstractModels.AbstractParsel");

                    b.Property<int>("PlaceOfDeliveryId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaceOfDepartureId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasIndex("PlaceOfDeliveryId");

                    b.HasIndex("PlaceOfDepartureId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("GroupParsel");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Parsel", b =>
                {
                    b.HasBaseType("NRM.Models.AbstractModels.AbstractParsel");

                    b.Property<int?>("GroupParselId")
                        .HasColumnType("integer");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasIndex("GroupParselId");

                    b.HasIndex("TypeId");

                    b.HasDiscriminator().HasValue("Parsel");
                });

            modelBuilder.Entity("NRM.Models.AbstractModels.AbstractLog", b =>
                {
                    b.HasOne("NRM.Models.DataModels.LogType", "Type")
                        .WithMany("Logs")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NRM.Models.DataModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NRM.Models.AbstractModels.AbstractParsel", b =>
                {
                    b.HasOne("NRM.Models.DataModels.ParselSatus", "Status")
                        .WithMany("Parsels")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("NRM.Models.DataModels.User", b =>
                {
                    b.HasOne("NRM.Models.DataModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogGroupParsel", b =>
                {
                    b.HasOne("NRM.Models.DataModels.GroupParsel", "GroupParsel")
                        .WithMany("LogGroupParsels")
                        .HasForeignKey("GroupParselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupParsel");
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogParsel", b =>
                {
                    b.HasOne("NRM.Models.DataModels.Parsel", "Parsel")
                        .WithMany("LogParsels")
                        .HasForeignKey("ParselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parsel");
                });

            modelBuilder.Entity("NRM.Models.DataModels.GroupParsel", b =>
                {
                    b.HasOne("NRM.Models.DataModels.Place", "PlaceOfDelivery")
                        .WithMany()
                        .HasForeignKey("PlaceOfDeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NRM.Models.DataModels.Place", "PlaceOfDeparture")
                        .WithMany()
                        .HasForeignKey("PlaceOfDepartureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NRM.Models.DataModels.User", "User")
                        .WithMany("GroupParsels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceOfDelivery");

                    b.Navigation("PlaceOfDeparture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Parsel", b =>
                {
                    b.HasOne("NRM.Models.DataModels.GroupParsel", "GroupParsel")
                        .WithMany("Parsels")
                        .HasForeignKey("GroupParselId");

                    b.HasOne("NRM.Models.DataModels.ParselType", "Type")
                        .WithMany("Parsels")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupParsel");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("NRM.Models.DataModels.LogType", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("NRM.Models.DataModels.ParselSatus", b =>
                {
                    b.Navigation("Parsels");
                });

            modelBuilder.Entity("NRM.Models.DataModels.ParselType", b =>
                {
                    b.Navigation("Parsels");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NRM.Models.DataModels.User", b =>
                {
                    b.Navigation("GroupParsels");
                });

            modelBuilder.Entity("NRM.Models.DataModels.GroupParsel", b =>
                {
                    b.Navigation("LogGroupParsels");

                    b.Navigation("Parsels");
                });

            modelBuilder.Entity("NRM.Models.DataModels.Parsel", b =>
                {
                    b.Navigation("LogParsels");
                });
#pragma warning restore 612, 618
        }
    }
}
